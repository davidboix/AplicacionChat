package exercicis.interficiechat;

import componentsPersonalitzats.ComponentJavaBean;
import encriptacio.Client;
import java.awt.Font;
import java.awt.Image;
import java.time.LocalTime;
import java.util.Calendar;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import funcionsbbdd.CrudMONGO;
import javax.swing.JFrame;

/**
 *
 * @author David Boix Sanchez
 * @version 1.0
 */
public class InterficieXat extends javax.swing.JFrame {

    /**
     * TODO: Hem de canviar el llistat d'usuaris que ara mateix es un boto per
     * un JTextArea perque utilitzarem la mateixa funcio per a ficar els
     * missatges un sota el altre.
     */
    String resFinal = "";
    String nomUsuari;
    Client cl = new Client();
    JOptionPane jop = new JOptionPane();
    CrudMONGO cm = new CrudMONGO("57.129.5.24", 27017, "grup1", "gat123", "comptes");

    /**
     * Definit constructor per poder inicialitzar objectes de tipus
     * InterficieXat.
     */
    public InterficieXat() {
        initComponents();
        inicialitzarInputs();
        inicialitzarIconos();
        //obrim el socket per a connectar al servidor
        cl.crearConnexio(this.textAreaMissatge);
    }

    /**
     * Definit constructor per poder inicialitzar objectes de tipus
     * InterficieXat. Aquest s'utilitza principalment per a quan un client es
     * connecta al servidor.
     *
     * @param nom Nom que senviar√† del client que es connecta
     */
    public InterficieXat(String nom, String ipServidor) {
        initComponents();
        inicialitzarInputs();
        inicialitzarIconos();
        this.nomUsuari = nom;
        cl.crearConnexio(ipServidor,this.textAreaMissatge, nom, this.clientsConnectats);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        vistaGeneral = new javax.swing.JPanel();
        headerVista = new javax.swing.JPanel();
        espaiSeleccioXat = new javax.swing.JPanel();
        botoXatPrivat = new javax.swing.JButton();
        botoCalendari = new javax.swing.JButton();
        espaiTitolXat = new javax.swing.JPanel();
        titolXat = new javax.swing.JLabel();
        mainVista = new javax.swing.JPanel();
        espaiControlMissatge = new javax.swing.JPanel();
        botoLogout = new javax.swing.JButton();
        botoEnviarMsg = new javax.swing.JButton();
        inputMsg = new componentsPersonalitzats.JTextFieldPersonalitzat();
        espaiMissatges = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaMissatge = new javax.swing.JTextArea();
        llistatVista = new javax.swing.JPanel();
        textLlistatUsuarisConectats = new javax.swing.JLabel();
        clientsConnectats = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CostaXat (Provisional)");

        vistaGeneral.setLayout(new java.awt.BorderLayout());

        headerVista.setBackground(new java.awt.Color(203, 219, 242));
        headerVista.setLayout(new java.awt.BorderLayout());

        espaiSeleccioXat.setBackground(new java.awt.Color(203, 219, 242));
        espaiSeleccioXat.setLayout(new java.awt.GridBagLayout());

        botoXatPrivat.setBackground(new java.awt.Color(125, 165, 221));
        botoXatPrivat.setToolTipText("");
        botoXatPrivat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoXatPrivatActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        espaiSeleccioXat.add(botoXatPrivat, gridBagConstraints);

        botoCalendari.setBackground(new java.awt.Color(125, 165, 221));
        botoCalendari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoCalendariActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 15);
        espaiSeleccioXat.add(botoCalendari, gridBagConstraints);

        headerVista.add(espaiSeleccioXat, java.awt.BorderLayout.LINE_START);

        espaiTitolXat.setBackground(new java.awt.Color(203, 219, 242));
        espaiTitolXat.setLayout(new java.awt.GridLayout(1, 0));

        titolXat.setBackground(new java.awt.Color(203, 219, 242));
        titolXat.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        titolXat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titolXat.setText("COSTAXAT");
        titolXat.setToolTipText("");
        espaiTitolXat.add(titolXat);

        headerVista.add(espaiTitolXat, java.awt.BorderLayout.CENTER);

        vistaGeneral.add(headerVista, java.awt.BorderLayout.PAGE_START);

        mainVista.setLayout(new java.awt.BorderLayout());

        espaiControlMissatge.setBackground(new java.awt.Color(203, 219, 242));
        espaiControlMissatge.setToolTipText("");
        espaiControlMissatge.setLayout(new java.awt.GridBagLayout());

        botoLogout.setBackground(new java.awt.Color(125, 165, 221));
        botoLogout.setToolTipText("Boto que no te cap funcio");
        botoLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoLogoutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        espaiControlMissatge.add(botoLogout, gridBagConstraints);

        botoEnviarMsg.setBackground(new java.awt.Color(125, 165, 221));
        botoEnviarMsg.setText("Enviar ");
        botoEnviarMsg.setToolTipText("Boto que serveix per enviar missatges al xat");
        botoEnviarMsg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botoEnviarMsgActionPerformed(evt);
            }
        });
        espaiControlMissatge.add(botoEnviarMsg, new java.awt.GridBagConstraints());

        inputMsg.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 97);
        espaiControlMissatge.add(inputMsg, gridBagConstraints);

        mainVista.add(espaiControlMissatge, java.awt.BorderLayout.PAGE_END);

        espaiMissatges.setLayout(new java.awt.BorderLayout());

        textAreaMissatge.setEditable(false);
        textAreaMissatge.setColumns(20);
        textAreaMissatge.setRows(5);
        jScrollPane1.setViewportView(textAreaMissatge);
        textAreaMissatge.setLineWrap(true);
        textAreaMissatge.setWrapStyleWord(true);

        espaiMissatges.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        mainVista.add(espaiMissatges, java.awt.BorderLayout.CENTER);

        vistaGeneral.add(mainVista, java.awt.BorderLayout.CENTER);

        llistatVista.setBackground(new java.awt.Color(203, 219, 242));
        llistatVista.setLayout(new java.awt.BorderLayout());

        textLlistatUsuarisConectats.setFont(new Font("Segoe UI",Font.PLAIN,14));
        textLlistatUsuarisConectats.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        textLlistatUsuarisConectats.setText("Llistat usuaris connectats");
        llistatVista.add(textLlistatUsuarisConectats, java.awt.BorderLayout.PAGE_START);

        clientsConnectats.setEditable(false);
        clientsConnectats.setColumns(12);
        clientsConnectats.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        clientsConnectats.setRows(5);
        llistatVista.add(clientsConnectats, java.awt.BorderLayout.CENTER);

        vistaGeneral.add(llistatVista, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vistaGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(vistaGeneral, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Event que s'activara quan el usuari hagui polsat el boto d'enviar
     * utilitzant qualsevol mitja de transmissio per poder activar el boto
     *
     * @param evt El event que activara la funcio
     */
    private void botoEnviarMsgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoEnviarMsgActionPerformed
        String msg = this.inputMsg.getText();
        String msgG = msg + "-/0/u/i/4/9<<z" + nomUsuari;
        String msgComprovacio = "Escriu el teu missatge...";

        if (msg.isEmpty() || msg.equalsIgnoreCase(msgComprovacio)) {
            return;
        }

        if (!msg.isEmpty()) {
            cl.enviarMissatgeServidor(cl.getOs(), cl.getSocket(), msgG);
            JOptionPane jop = new JOptionPane();
            Icon imagenLabel = new ImageIcon(getClass().getResource("/check.png"));

            String[] opcions = {"Acceptar"};

            int msgEnviat = jop.showOptionDialog(
                    null,
                    "Missatge Enviat",
                    "Missatge enviat correctament",
                    jop.DEFAULT_OPTION,
                    jop.WARNING_MESSAGE,
                    imagenLabel,
                    opcions,
                    opcions[0]
            );

            if (msgEnviat < 1) {
                cm.setNomColeccio("missatges");
                String data = cm.tractarData();
                cm.setDadesMsg(this.nomUsuari, msg, data);
                this.netejarInput(this.inputMsg);
            }
        }

    }//GEN-LAST:event_botoEnviarMsgActionPerformed
    /**
     * Accio que enviar√† el missatge exit al servidor, lo qual el desconnectar√†
     * del servidor
     *
     * @param evt
     */
    private void botoLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoLogoutActionPerformed
        try {
            String msg = "exit";
            if (msg.equalsIgnoreCase("exit")) {
                String[] opcions = {"Acceptar", "Rebutjar"};
                int resposta = jop.showOptionDialog(
                        null,
                        "Esteu segurs que voleu tancar sessi√≥?",
                        "Sortida xat",
                        jop.DEFAULT_OPTION,
                        jop.WARNING_MESSAGE,
                        null,
                        opcions,
                        opcions[0]
                );

                if (resposta < 1) {
                    cl.enviarMissatgeServidor(cl.getOs(), cl.getSocket(), msg);
                    this.tancarFinestra();
                } else {
                    String[] noSortida = {"Acceptar"};
                    jop.showOptionDialog(
                            null,
                            "No heu sortit de la aplicatiu, i per tant, NO heu tancat sessi√≥.",
                            "Sortida xat",
                            jop.DEFAULT_OPTION,
                            jop.WARNING_MESSAGE,
                            null,
                            noSortida,
                            noSortida[0]
                    );
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_botoLogoutActionPerformed

    /**
     * Accio la qual mostrar√† el JPanel per a poder veure els missatges per la
     * data dels mateixos
     *
     * @param evt
     */
    private void botoCalendariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoCalendariActionPerformed
        GetMissatgeData gmd = new GetMissatgeData();
        gmd.setVisible(true);
    }//GEN-LAST:event_botoCalendariActionPerformed

    private void botoXatPrivatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botoXatPrivatActionPerformed
        ComponentJavaBean cjb = new ComponentJavaBean();
        JFrame jf = new JFrame();
        jf.add(cjb);
        jf.setVisible(true);
        
        
    }//GEN-LAST:event_botoXatPrivatActionPerformed
    /**
     * Funcio creada per inicialitzar el JTextField amb un missatge per defecte
     * per a que el usuari sapigui on ha de escriure un missatge que enviara per
     * el xat.
     */
    private void inicialitzarInputs() {
        this.inputMsg.setPlaceHolder("Escriu el teu missatge...");
        this.inputMsg.setText(this.inputMsg.getPlaceHolder());
    }

    /**
     * Funcio creada per poder inicialitzar les icones que apareixeran en la
     * interficie grafica
     */
    private void inicialitzarIconos() {

        ImageIcon iconoXatPrivatAModificar = new ImageIcon(getClass().getResource("/iconoXatPrivat.png"));
        //ImageIcon iconoXatGrupalAModificar = new ImageIcon(getClass().getResource("/iconoXatGrupal.png"));
        ImageIcon iconoCalendariAModificar = new ImageIcon(getClass().getResource("/iconoCalendari.png"));
        ImageIcon iconoSettingAModificar = new ImageIcon(getClass().getResource("/iconoLogout.png"));
        ImageIcon iconoEnviarModificar = new ImageIcon(getClass().getResource("/iconoEnviar.png"));

        Image iconoXatPrivatModificat = iconoXatPrivatAModificar.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH);
        Image iconoCalendariModificat = iconoCalendariAModificar.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH);
        Image iconoSettingsModificat = iconoSettingAModificar.getImage().getScaledInstance(17, 17, Image.SCALE_SMOOTH);
        Image iconoEnviarModificat = iconoEnviarModificar.getImage().getScaledInstance(17, 17, Image.SCALE_SMOOTH);

        ImageIcon iconoXatPrivat = new ImageIcon(iconoXatPrivatModificat);
        ImageIcon iconoCalendari = new ImageIcon(iconoCalendariModificat);
        ImageIcon iconoSettings = new ImageIcon(iconoSettingsModificat);
        ImageIcon iconoEnviar = new ImageIcon(iconoEnviarModificat);

        this.botoXatPrivat.setIcon(iconoXatPrivat);
        this.botoCalendari.setIcon(iconoCalendari);
        this.botoLogout.setIcon(iconoSettings);
        this.botoEnviarMsg.setIcon(iconoEnviar);
    }

    /**
     * Funcio desenvolupada per poder retornar la data la qual ens trobem en
     * aquell moment en format cadena de text
     *
     * @return La data de avui en format cadena de text.
     */
    private String getData() {
        Calendar cal = Calendar.getInstance();
        int dia = cal.get(Calendar.DAY_OF_MONTH);
        int mes = cal.get(Calendar.MONTH) + 1;
        int any = cal.get(Calendar.YEAR);
        String data = dia + "/" + mes + "/" + any;

        if (!data.isEmpty()) {
            return data;
        }

        return "";
    }

    /**
     * Funcio desenvolupada per obtenir la hora, minuts i segons actuals en el
     * moment que fem la crida de la funcio
     *
     * @return Hora, Minuts i Segons com una cadena de text.
     */
    private String getTemps() {
        LocalTime myObj = LocalTime.now();
        String hora = tractarTemps(myObj.getHour());
        String minuts = tractarTemps(myObj.getMinute());
        String segons = tractarTemps(myObj.getSecond());
        String temps = hora + ":" + minuts + ":" + segons;
        if (!temps.isEmpty()) {
            return temps;
        }
        return "";
    }

    /**
     * Funcio desenvolupada per poder passar tipus enters a tipus cadena de text
     * TODO: Possible canvi de nom de la funcio
     *
     * @param temps El valor enter que volem canviar a una cadena de text.
     * @return El valor enter que hem passat per parametres convertit a cadena
     * de text
     */
    private String tractarTemps(int temps) {
        String tempsActual = String.valueOf(temps);
        return tempsActual;
    }

    /**
     * Neteja el textField on s'escriu el missatge que es vol enviar
     *
     * @param msg
     */
    private void netejarInput(JTextField msg) {

        if (!msg.getText().isEmpty()) {
            msg.setText(null);
        }
    }

    /**
     * Tanca la finestra de la interficie de xat
     */
    private void tancarFinestra() {
        this.dispose();
        System.exit(0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterficieXat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterficieXat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterficieXat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterficieXat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterficieXat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botoCalendari;
    private javax.swing.JButton botoEnviarMsg;
    private javax.swing.JButton botoLogout;
    private javax.swing.JButton botoXatPrivat;
    private javax.swing.JTextArea clientsConnectats;
    private javax.swing.JPanel espaiControlMissatge;
    private javax.swing.JPanel espaiMissatges;
    private javax.swing.JPanel espaiSeleccioXat;
    private javax.swing.JPanel espaiTitolXat;
    private javax.swing.JPanel headerVista;
    private componentsPersonalitzats.JTextFieldPersonalitzat inputMsg;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel llistatVista;
    private javax.swing.JPanel mainVista;
    private javax.swing.JTextArea textAreaMissatge;
    private javax.swing.JLabel textLlistatUsuarisConectats;
    private javax.swing.JLabel titolXat;
    private javax.swing.JPanel vistaGeneral;
    // End of variables declaration//GEN-END:variables
}
